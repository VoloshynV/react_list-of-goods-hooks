{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortOptions","goodsFromServer","App","useState","DEFAULT","sortBy","setSortBy","isReversed","setIsReversed","isOptionsModified","preparedGoods","goods","sort","a","b","ALPHABETIC","localeCompare","LENGTH","length","reverse","getPrepareGoods","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,wBAAAA,E,gBAAAA,E,YAAAA,M,KAWL,IA+BaE,EAAgB,WAC3B,MAA4BC,mBAASH,EAAYI,SAAjD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAoBJ,IAAWL,EAAYI,SAAWG,EAEtDG,EArCgB,SACtBC,EADsB,GAMlB,IAHFN,EAGC,EAHDA,OACAE,EAEC,EAFDA,WAGIG,EAAa,YAAOC,GAiB1B,OAfIN,GACFK,EAAcE,MAAK,SAACC,EAAGC,GACrB,OAAQT,GACN,KAAKL,EAAYe,WACf,OAAOF,EAAEG,cAAcF,GAEzB,KAAKd,EAAYiB,OACf,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAKXX,EACKG,EAAcS,UAGhBT,EASeU,CAAgBnB,EAAiB,CACrDI,SACAE,eAQF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,IAAWL,EAAYe,aAErCS,QAAS,kBAAMlB,EAAUN,EAAYe,aALvC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,IAAWL,EAAYiB,SAErCO,QAAS,kBAAMlB,EAAUN,EAAYiB,SALvC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAc,SAAAiB,GAAI,OAAKA,MALxC,qBAUChB,GACC,wBACEa,KAAK,SACLD,UAAU,4BACVG,QA1CU,WAClBlB,EAAUN,EAAYI,SACtBI,GAAc,IAqCR,sBAUJ,6BACGE,EAAcgB,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCvHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7bbb1046.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortOptions {\n  ALPHABETIC = 'alphabetic',\n  LENGTH = 'length',\n  DEFAULT = '',\n}\n\ntype SortFields = {\n  sortBy: SortOptions\n  isReversed: boolean\n};\n\nconst getPrepareGoods = (\n  goods: string[],\n  {\n    sortBy,\n    isReversed,\n  }: SortFields,\n) => {\n  const preparedGoods = [...goods];\n\n  if (sortBy) {\n    preparedGoods.sort((a, b) => {\n      switch (sortBy) {\n        case SortOptions.ALPHABETIC:\n          return a.localeCompare(b);\n\n        case SortOptions.LENGTH:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState(SortOptions.DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const isOptionsModified = sortBy !== SortOptions.DEFAULT || isReversed;\n\n  const preparedGoods = getPrepareGoods(goodsFromServer, {\n    sortBy,\n    isReversed,\n  });\n\n  const handleReset = () => {\n    setSortBy(SortOptions.DEFAULT);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortBy !== SortOptions.ALPHABETIC,\n          })}\n          onClick={() => setSortBy(SortOptions.ALPHABETIC)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortBy !== SortOptions.LENGTH,\n          })}\n          onClick={() => setSortBy(SortOptions.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(prev => !prev)}\n        >\n          Reverse\n        </button>\n\n        {isOptionsModified && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}